scalar Time
# Types
type User {
    id: Int!
    vkUserId: Int!
    avatar: String
    firstName: String
    lastName: String
}

type Unit {
    id: Int!
    title: String!
}

type Picked {
    count: Int!
    friendsCount: Int!
    users: [User!]!
}

type Pair {
    id: Int!
    unitOne: Unit!
    unitTwo: Unit!
    unitOnePicked: Picked!
    unitTwoPicked: Picked!
}

type Battle {
    id: Int!
    title: String!
}

type Round {
    id: Int!
    step: Int!
}

# Define queries here
type Query {
    currentUser: User
    getActiveBattles: [Battle!]!
    getRound(roundId: Int!): [Pair!]!
}

type Mutation {
    startBattle(battleId: Int!): [Round!]!
    makePick(pairId: Int!, unitId: Int!): Boolean
}